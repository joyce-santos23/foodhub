package br.com.foodhub.controller.api.user;

import br.com.foodhub.dto.generic.ApiResponseGen;
import br.com.foodhub.dto.pagination.PageResponseDto;
import br.com.foodhub.dto.user.OwnerRequestDto;
import br.com.foodhub.dto.user.OwnerResponseDto;
import br.com.foodhub.dto.user.OwnerUpdateDto;
import br.com.foodhub.entities.user.User; // 游뚿 IMPORT NECESS츼RIO
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * Interface de contrato para a OwnerController.
 * Cont칠m a documenta칞칚o OpenAPI e o mapeamento de endpoints para Owners.
 */
@Tag(name = "Propriet치rios", description = "Opera칞칫es de consulta e registro de propriet치rios (Owners).")
@RequestMapping("/api/v1/owners")
public interface OwnerApi {

    // =================================================================
    // GET ALL (ADMIN)
    // =================================================================
    @Operation(
            summary = "Listar Propriet치rios (ADMIN)",
            description = "Retorna uma lista paginada de todos os propriet치rios no sistema.",
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Consulta realizada com sucesso.",
                    content = @Content(schema = @Schema(implementation = PageResponseDto.class))),
            @ApiResponse(responseCode = "401", description = "Token ausente ou inv치lido."),
            @ApiResponse(responseCode = "403", description = "Permiss칚o negada. Requer papel ADMIN.")
    })
    @GetMapping
    ResponseEntity<PageResponseDto<OwnerResponseDto>> findAll(
            @Parameter(description = "N칰mero da p치gina (inicia em 1)") @RequestParam(defaultValue = "1") int page,
            @Parameter(description = "Tamanho da p치gina") @RequestParam(defaultValue = "10") int size,
            @Parameter(description = "Campo para ordena칞칚o") @RequestParam(defaultValue = "id") String sortBy,
            @Parameter(description = "Dire칞칚o da ordena칞칚o (asc/desc)") @RequestParam(defaultValue = "asc") String direction
    );

    // =================================================================
    // GET BY ID (ADMIN)
    // =================================================================
    @Operation(
            summary = "Buscar Propriet치rio por ID (ADMIN)",
            description = "Retorna detalhes de um propriet치rio espec칤fico pelo ID.",
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Propriet치rio encontrado com sucesso.",
                    content = @Content(schema = @Schema(implementation = OwnerResponseDto.class))),
            @ApiResponse(responseCode = "401", description = "Token ausente ou inv치lido.",
                    content = @Content),
            @ApiResponse(responseCode = "403", description = "Permiss칚o negada. Requer papel ADMIN.",
                    content = @Content),
            @ApiResponse(responseCode = "404", description = "Propriet치rio n칚o encontrado.",
                    content = @Content)
    })
    @GetMapping("/{id}")
    ResponseEntity<OwnerResponseDto> findByid(@PathVariable Long id);

    // =================================================================
    // GET ME (AUTENTICADO)
    // =================================================================
    @Operation(
            summary = "Buscar Perfil Pr칩prio",
            description = "Retorna os dados do propriet치rio autenticado via token.",
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Perfil encontrado.")
    })
    @GetMapping("/me")
    ResponseEntity<OwnerResponseDto> getAuthenticatedOwner(
            @Parameter(hidden = true) User user
    );

    // =================================================================
    // CREATE (P칔BLICO)
    // =================================================================
    @Operation(
            summary = "Registro de Novo Propriet치rio",
            description = "Cria uma nova conta de propriet치rio no sistema. Rota p칰blica."
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Propriet치rio criado com sucesso.",
                    content = @Content(schema = @Schema(implementation = OwnerResponseDto.class))),
            @ApiResponse(responseCode = "400", description = "Dados de entrada inv치lidos ou CNPJ/Email/Telefone j치 em uso.",
                    content = @Content)
    })
    @PostMapping
    ResponseEntity<OwnerResponseDto> create(@Valid @RequestBody OwnerRequestDto dto);

    // =================================================================
    // UPDATE (AUTENTICADO - CHECAGEM DE POSSE)
    // =================================================================
    @Operation(
            summary = "Atualizar Perfil",
            description = "Atualiza os dados de um propriet치rio. Requer que o usu치rio seja o dono do ID ou Admin.",
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Atualiza칞칚o realizada com sucesso.",
                    content = @Content(schema = @Schema(implementation = OwnerResponseDto.class))),
            @ApiResponse(responseCode = "403", description = "Acesso negado. O recurso n칚o pertence ao usu치rio.",
                    content = @Content),
            @ApiResponse(responseCode = "404", description = "Propriet치rio n칚o encontrado.",
                    content = @Content)
    })
    @PutMapping("/{id}")
    ResponseEntity<OwnerResponseDto> update(
            @PathVariable Long id,
            @RequestBody OwnerUpdateDto dto,
            @Parameter(hidden = true) User user
    );

    // =================================================================
    // DELETE (AUTENTICADO - CHECAGEM DE POSSE)
    // =================================================================
    @Operation(
            summary = "Deletar Propriet치rio",
            description = "Deleta a conta de um propriet치rio pelo ID. Requer que o usu치rio seja o dono do ID ou Admin.",
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Propriet치rio deletado com sucesso.",
                    content = @Content(schema = @Schema(implementation = ApiResponseGen.class))),
            @ApiResponse(responseCode = "403", description = "Acesso negado. O recurso n칚o pertence ao usu치rio.",
                    content = @Content),
            @ApiResponse(responseCode = "404", description = "Propriet치rio n칚o encontrado.",
                    content = @Content)
    })
    @DeleteMapping("/{id}")
    ResponseEntity<ApiResponseGen> delete(
            @PathVariable Long id,
            @Parameter(hidden = true) User user
    );
}
