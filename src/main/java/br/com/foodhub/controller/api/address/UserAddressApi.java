package br.com.foodhub.controller.api.address;

import br.com.foodhub.dto.address.UserAddressRequestDto;
import br.com.foodhub.dto.address.UserAddressResponseDto;
import br.com.foodhub.dto.generic.ApiResponseGen;
import br.com.foodhub.entities.user.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * Interface de contrato para a UserAddressController.
 * Gerencia opera칞칫es de endere칞o aninhadas ao ID do usu치rio.
 */
@Tag(name = "Endere칞os (Aninhado)", description = "Gerenciamento de endere칞os de usu치rios (Customer ou Owner).")
@RequestMapping("/api/v1/{userId}/address")
public interface UserAddressApi {

    // =================================================================
    // GET ALL (Consulta todos os endere칞os do usu치rio {userId})
    // =================================================================
    @Operation(
            summary = "Listar Endere칞os do Usu치rio Alvo",
            description = "Retorna todos os endere칞os do usu치rio especificado por {userId}. Requer que o usu치rio logado seja o pr칩prio {userId} ou ADMIN.",
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Lista de endere칞os retornada com sucesso."),
            @ApiResponse(responseCode = "401", description = "N칚o autorizado (Token ausente/inv치lido).",
                    content = @Content),
            @ApiResponse(responseCode = "403", description = "Acesso negado (Tentativa de acessar recurso de outro usu치rio).",
                    content = @Content),
            @ApiResponse(responseCode = "404", description = "Usu치rio alvo n칚o encontrado.",
                    content = @Content)
    })
    @GetMapping
    ResponseEntity<List<UserAddressResponseDto>> getAllAddress(
            @PathVariable("userId")
            @Parameter(description = "ID do usu치rio (dono) alvo dos endere칞os.")
            Long userId,
            @Parameter(hidden = true) User user
    );

    // =================================================================
    // POST (Criar novo endere칞o para o usu치rio {userId})
    // =================================================================
    @Operation(
            summary = "Criar Novo Endere칞o",
            description = "Cria um novo endere칞o e o associa ao usu치rio especificado por {userId}.",
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Endere칞o criado e associado."),
            @ApiResponse(responseCode = "400", description = "Dados de endere칞o inv치lidos.",
                    content = @Content),
            @ApiResponse(responseCode = "403", description = "Acesso negado (Tentativa de criar endere칞o para outro usu치rio).",
                    content = @Content)
    })
    @PostMapping
    ResponseEntity<UserAddressResponseDto> createAddress(
            @PathVariable("userId") Long userId,
            @RequestBody @Valid UserAddressRequestDto dto,
            @Parameter(hidden = true) User user // 游뚿 CORRIGIDO: Tipo User
    );

    // =================================================================
    // PUT (Atualizar um endere칞o espec칤fico {addressId})
    // =================================================================
    @Operation(
            summary = "Atualizar Endere칞o Espec칤fico",
            description = "Atualiza um endere칞o espec칤fico ({addressId}) que pertence ao usu치rio {userId}.",
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Endere칞o atualizado com sucesso."),
            @ApiResponse(responseCode = "403", description = "Acesso negado (N칚o 칠 o dono ou Admin, ou o endere칞o n칚o pertence ao {userId}).",
                    content = @Content),
            @ApiResponse(responseCode = "404", description = "Endere칞o n칚o encontrado.",
                    content = @Content)
    })
    @PutMapping("/{addressId}")
    ResponseEntity<UserAddressResponseDto> updateAddress(
            @PathVariable("userId") Long userId,
            @PathVariable("addressId") Long addressId,
            @RequestBody UserAddressRequestDto dto,
            @Parameter(hidden = true) User user
    );

    // =================================================================
    // DELETE
    // =================================================================
    @Operation(
            summary = "Deletar Endere칞o Espec칤fico",
            description = "Deleta um endere칞o espec칤fico ({addressId}).",
            security = @SecurityRequirement(name = "BearerAuth")
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Endere칞o deletado com sucesso."),
            @ApiResponse(responseCode = "403", description = "Acesso negado (N칚o 칠 o dono, Admin, ou o endere칞o n칚o pertence ao {userId}).",
                    content = @Content),
            @ApiResponse(responseCode = "404", description = "Endere칞o n칚o encontrado.",
                    content = @Content)
    })
    @DeleteMapping("/{addressId}")
    ResponseEntity<ApiResponseGen> deleteAddress(
            @PathVariable("userId") Long userId,
            @PathVariable("addressId") Long addressId,
            @Parameter(hidden = true) User user
    );
}
